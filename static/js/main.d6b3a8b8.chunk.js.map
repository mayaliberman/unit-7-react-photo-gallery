{"version":3,"sources":["Components/GalleryItem.js","Components/NoGifs.js","Components/PhotoContainer.js","config.js","Components/SearchForm.js","Components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["GalleryItem","props","src","url","alt","NoGifs","className","PhotoContainer","photos","title","match","params","query","results","data","length","map","photo","farm","server","id","secret","key","apiKey","SearchForm","state","searchText","onSearchChange","e","setState","target","value","handleSubmit","preventDefault","search","history","push","currentTarget","reset","onSubmit","this","type","name","placeholder","ref","input","onChange","required","fill","height","viewBox","width","xmlns","d","Component","Nav","to","App","sunset","dogs","computers","loading","performSearch","axios","get","then","response","catch","error","console","log","render","exact","path","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d6b3a8b8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst GalleryItem = (props) => (\r\n    <li>\r\n    <img src={props.url} alt={props.alt} />\r\n  </li>\r\n \r\n);\r\n\r\nexport default GalleryItem;","import React from 'react';\r\n\r\nconst NoGifs = () => (\r\n    <li className=\"not-found\">\r\n    <h3>No Results Found</h3>\r\n    <p>You search did not return any results. Please try again.</p>\r\n  </li> \r\n);\r\n\r\nexport default NoGifs;","import React from 'react';\r\nimport GalleryItem from './GalleryItem';\r\nimport NoGifs from './NoGifs';\r\n\r\nconst PhotoContainer = (props ) => {\r\n  const title = props.title || props.match.params.query\r\n  const results = props.data;\r\n  let photos;\r\n    if(results.length > 0) {\r\n  photos = results.map(photo => \r\n    <GalleryItem \r\n    url={`https://farm${photo.farm}.staticflickr.com/${photo.server}/${photo.id}_${photo.secret}_q.jpg`}\r\n     key={photo.id}\r\n       alt={photo.title}\r\n     />\r\n    )\r\n  } else {\r\n    photos = <NoGifs />\r\n  }\r\n \r\n  return (\r\n    <div className='photo-container'>\r\n      <h2>{title}</h2>\r\n      <ul>\r\n        {photos}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PhotoContainer;\r\n","const apiKey = '6ec107530f7edaddfedb6a5a54f24965';\r\n\r\nexport default apiKey;","import React, { Component } from 'react';\r\nexport default class SearchForm extends Component {\r\nstate = {\r\n  searchText: ''\r\n}\r\n\r\nonSearchChange = e => {\r\n  this.setState({searchText: e.target.value})\r\n}\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.search(this.query.value);\r\n    this.props.history.push(`/search/${this.query.value}`)\r\n    e.currentTarget.reset();\r\n    \r\n  }\r\n  render() {\r\n    return (\r\n      <div className='container'>\r\n      <form className='search-form' onSubmit={this.handleSubmit}>\r\n        <input type='search' name='search' placeholder='Search'  ref={(input) => this.query = input} onChange={this.onSearchChange} required />\r\n        <button type='submit' className='search-button'>\r\n          <svg\r\n            fill='#fff'\r\n            height='24'\r\n            viewBox='0 0 23 23'\r\n            width='24'\r\n            xmlns='http://www.w3.org/2000/svg'\r\n          >\r\n            <path d='M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z' />\r\n            <path d='M0 0h24v24H0z' fill='none' />\r\n          </svg>\r\n        </button>\r\n      </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst Nav = () => (\r\n  <nav className='main-nav'>\r\n    <ul>\r\n      <li><NavLink to=\"/sunset\">Sunset</NavLink></li>\r\n      <li><NavLink to=\"/dogs\">Dogs</NavLink></li>\r\n      <li><NavLink to=\"/computers\">Computers</NavLink></li>\r\n    </ul>\r\n    </nav>\r\n  \r\n)\r\n\r\nexport default Nav;\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport axios from 'axios';\nimport PhotoContainer from './Components/PhotoContainer';\nimport apiKey from './config';\nimport SearchForm from './Components/SearchForm';\nimport Nav from './Components/Nav';\n\nexport default class App extends Component {\n  state = {\n    photos: [],\n    sunset: [],\n    dogs: [],\n    computers: [],\n    loading: true\n  };\n\n  componentDidMount() {\n    this.performSearch();\n    this.performSearch('sunset', 'sunset');\n    this.performSearch('dogs', 'dogs');\n    this.performSearch('computers', 'computers');\n  }\n\n  performSearch = (query = 'sunset+people', key = 'photos') => {\n    //fetch data from flickr\n    axios\n      .get(\n        ` https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${query}&per_page=24&format=json&nojsoncallback=1`\n      )\n      .then(response => {\n        //set the response so that pics will be equal to the data array containing cat photos from flickr\n        this.setState({\n          [key]: response.data.photos.photo,\n          loading: false //initialize a loading state to display a loading message\n        });\n      })\n      .catch(error => {\n        //this catch method outputs a message to the console, should axios fail to retrieve data\n        console.log('Something went wrong, could not access data', error);\n      });\n  };\n\n  render() {\n    return (\n      <HashRouter >\n        <div className='container'>\n        <h1>Photo Gallery</h1>\n        <p>Enjoy searching photos from Flicker using the search field or the navigation buttons</p>\n        <br />\n          <Route\n            render={props => (\n              <SearchForm {...props} search={this.performSearch} />\n            )}\n          />\n          <Nav />\n          <Switch>\n            <Route\n              exact\n              path='/'\n              render={props => (\n                <PhotoContainer\n                  {...props}\n                  data={this.state.photos}\n                  title='Results'\n                />\n              )}\n            />\n            <Route\n              path='/search/:query'\n              render={props => (\n                <PhotoContainer {...props} data={this.state.photos} />\n              )}\n            />\n            <Route\n              path='/sunset'\n              render={props => (\n                <PhotoContainer\n                  {...props}\n                  data={this.state.sunset}\n                  title='Sunset'\n                />\n              )}\n            />\n            <Route\n              path='/dogs'\n              render={props => (\n                <PhotoContainer\n                  {...props}\n                  data={this.state.dogs}\n                  title='Dogs'\n                />\n              )}\n            />\n            <Route\n              path='/computers'\n              render={props => (\n                <PhotoContainer\n                  {...props}\n                  data={this.state.computers}\n                  title='Computers'\n                />\n              )}\n            />\n          </Switch>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}